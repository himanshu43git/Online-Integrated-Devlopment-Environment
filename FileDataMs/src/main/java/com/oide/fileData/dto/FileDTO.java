package com.oide.fileData.dto;

import com.oide.fileData.entities.FileEntity;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.Instant;

/**
 * DTO for file metadata transfer, aligned with FileEntity fields.
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
public class FileDTO {

    /**
     * ID of the file record. For create operations, this may be null; for responses or updates, it should be positive.
     */
    @Positive(message = "fileId must be a positive number")
    private Long fileId;

    /**
     * ID of the user who uploaded the file.
     */
    @NotNull(message = "userId is required")
    @Positive(message = "userId must be a positive number")
    private Long userId;

    /**
     * Original filename as uploaded (e.g., "document.pdf").
     */
    @NotBlank(message = "originalFilename is required")
    private String originalFilename;

    /**
     * Filename used for storage on server (e.g., "42_1623456789012_document.pdf").
     * For create operations, this may be generated by the service.
     */
    private String storageFilename;

    /**
     * Timestamp when the file was uploaded. For create operations, this is set by the service.
     */
    private Instant uploadTime;

    /**
     * Map this DTO to a FileEntity for persistence.
     * For create: storageFilename and uploadTime may be null (set by service). fileId may be null for new entities.
     */
    public FileEntity toEntity() {
        FileEntity entity = new FileEntity();
        if (this.fileId != null) {
            entity.setId(this.fileId);
        }
        entity.setUserId(this.userId);
        entity.setOriginalFilename(this.originalFilename);
        // storageFilename and uploadTime may be set later by service logic
        if (this.storageFilename != null) {
            entity.setStorageFilename(this.storageFilename);
        }
        if (this.uploadTime != null) {
            entity.setUploadTime(this.uploadTime);
        }
        return entity;
    }

    /**
     * Create a DTO from a FileEntity.
     */
    public static FileDTO fromEntity(FileEntity entity) {
        if (entity == null) {
            return null;
        }
        FileDTO dto = new FileDTO();
        dto.setFileId(entity.getId());
        dto.setUserId(entity.getUserId());
        dto.setOriginalFilename(entity.getOriginalFilename());
        dto.setStorageFilename(entity.getStorageFilename());
        dto.setUploadTime(entity.getUploadTime());
        return dto;
    }
}
